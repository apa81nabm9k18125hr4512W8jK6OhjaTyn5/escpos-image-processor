"use strict";

var _common = require("test/common");

var _channel = require("../channel");

describe('we check the validateArrayOfChannels method', function () {
  it('check for a RGB image', function () {
    let image = new _common.Image(2, 2, {
      kind: 'RGB'
    });
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: ['r', 'g', 'b']
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 'r'
    })).toEqual([0]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 'b'
    })).toEqual([2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 1
    })).toEqual([1]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: [0, 1, 2]
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image)).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      allowAlpha: true
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      allowAlpha: false
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      defaultAlpha: true
    })).toEqual([0, 1, 2]);
    expect(function () {
      (0, _channel.validateArrayOfChannels)(image, {
        channels: 'a'
      });
    }).toThrowError(/does not contain alpha/);
    expect(function () {
      (0, _channel.validateArrayOfChannels)(image, {
        channels: ['r', 'a']
      });
    }).toThrowError(/does not contain alpha/);
  });
  it('check for a RGBA image', function () {
    let image = new _common.Image(2, 2, {
      kind: 'RGBA'
    });
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: ['r', 'g', 'b']
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 'r'
    })).toEqual([0]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 'b'
    })).toEqual([2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 1
    })).toEqual([1]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: [0, 1, 2]
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image)).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      defaultAlpha: true
    })).toEqual([0, 1, 2, 3]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      defaultAlpha: false
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      allowAlpha: true,
      defaultAlpha: false
    })).toEqual([0, 1, 2]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      allowAlpha: true,
      defaultAlpha: true
    })).toEqual([0, 1, 2, 3]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 'a'
    })).toEqual([3]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: ['r', 'a']
    })).toEqual([0, 3]);
    expect(function () {
      (0, _channel.validateArrayOfChannels)(image, {
        channels: 'a',
        allowAlpha: false
      });
    }).toThrowError(/alpha channel may not be selected/);
  });
  it('check for a GreyA image', function () {
    let image = new _common.Image(2, 2, {
      kind: 'GREYA'
    });
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 'a'
    })).toEqual([1]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      channels: 1
    })).toEqual([1]);
    expect((0, _channel.validateArrayOfChannels)(image)).toEqual([0]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      defaultAlpha: true
    })).toEqual([0, 1]);
    expect((0, _channel.validateArrayOfChannels)(image, {
      defaultAlpha: false
    })).toEqual([0]);
    expect(function () {
      (0, _channel.validateArrayOfChannels)(image, {
        channels: ['r']
      });
    }).toThrowError(/undefined channel/);
    expect(function () {
      (0, _channel.validateArrayOfChannels)(image, {
        allowAlpha: false,
        channels: ['a']
      });
    }).toThrowError(/alpha channel may not be selected/);
  });
});